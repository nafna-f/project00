nafM -- 2024-10-23 XX:XX
* Repo submodule linked
* Added README.md
* Completed design document

nafM -- 2024-10-28 XX:XX
* Revised design document
  - You can add or edit blogs
  - Defined relationships between front and backend
  - Consolidated tables for blog posts and their categories
* Completed repo structure
  - Uploaded design.pdf with our design document
  - Uploaded flag.jpg with our team flag
  - Added requirements.txt
  - Added devlog.txt
  - Added app directory
  - Added \_\_intit\_\_.py
* requirements.txt updated
  - Included prereqs

nafM -- 2024-10-29 XX:XX
* Physical hardcopies complete and submitted
* Updated README.md
  - Contains roster
  - Contains description
  - Contains install guide
  - Contains launch codes
* Updated requirements.txt
  - Removed excess text.

chloeW -- 2024-10-30 21:15
* Updated requirements.txt
  - Includes list of pip modules for installation
* Updated README.md
  - Updated install guide + launch codes to include more detailed instructions

benR -- 2024-10-31 11:44
* Added __init__.py in app directory
  - Initialized Flask app with SQLAlchemy for database management
  - Configured app settings through config.py
  - Imported routes and models to set up application structure

benR -- 2024-10-31 21:43
* Created models.py in app directory
  - Defined User and BlogPost models
  - Established one-to-many relationship between User and BlogPost
  - Configured table structure to support user registration and blog post creation
* Created config.py
  - Added app configuration settings including database URI and secret key

benR -- 2024-10-31 22:57
* Created and structured routes.py
  - Added main page route to serve as landing page for logged-out users
  - Implemented login and registration routes with placeholders for authentication logic
  - Added home page route with access restricted to logged-in users
* Structured each route to render respective HTML templates for main, login, register, and home pages
* Tested routing flow to ensure pages load correctly and navigate based on login status
  - Set up basic flash messaging for login and registration error handling (to be refined)

benR -- 2024-10-31 23:09
* Updated README.md
  - Added structured installation and setup guide
  - Detailed virtual environment setup and activation
  - Clarified steps for launching the Flask app and accessing the application
  - Provided information on stopping the app
* Ensured README.md follows GitHub Topher's standards
* Added headings to all python files for readability

chloeW -- 2024-11-3 19:09
* Moved config.py into app directory
* Updated requirements.txt
  - Added Flask-SQLAlchemy
* Updated README.md
  - Made minor formatting changes

nafM -- 2024-11-3 23:41
* Redid devlog.txt
  
benR -- 2024-11-3 23:22
* Updated models.py
  - Added password hashing setup for User model to securely store login credentials.

* Updated routes.py
  - Updated main, login, register, home, and logout routes with password and login logic.
  - Implemented flash messages for user feedback.
  - Used `@login_required` decorator on home and logout routes to restrict access to logged-in users only.
  - Set up password verification using `check_password_hash` and hashed passwords on registration.

* Updated __init__.py
  - Set up Flask-Login for session handling, including `login_view` for redirecting users to login page.

* Updated requirements.txt
  - Added `Flask-Login==0.6.2` to manage user logins and sessions securely.

benR -- 2024-11-4 11:43
* Updated routes.py
  - Added a route for creating a new blog post: '/post', which creates a post with users category and author
  - Added a route for viewing blog posts by category: '/category/<category_name>', using query.filter.by
  - Added a beautiful route for editing blog posts: '/post/<int:post_id/edit', which makes sure to check if user is the author of the post, then edits it accordingly
  - Added a route for deleting posts: '/post/<int:post_id>/delete', which checks if user is author of post and then deletes it

vedantK -- 2024-11-4 11:58
* Created UI/UX design on Figma
  - Made basic formats to follow for 'Home' page, 'Register' page, 'Login' page, and 'Sports' page as an example
  - Used Figma to create designs
* Updated design document
  - Updated roles to add UI/UX design next to my name
  - Added screenshots of UI/UX design to make it accessible for the whole group

vedantK -- 2024-11-5 9:04
* Created HTML Templates
  - Made HTML templates for the following files: main.html, login.html, register.html, home.html, post.html, category.html, edit_post.html, recent_posts.html, 404.html, and 500.html
  - All files can be located in project00/app/templates
  - Links are not working for some reason, so will look at that further in class tomorrow and fix
  
benR -- 2024-11-05 20:34
* Used SimpleLogin instead of Login Manager for user authentication
	- Updated __init__.py to use flask_simplelogin.SimpleLogin for handling authentication.
	- Added custom validate_user function for user verification based on username and password.
	- Updated login functionality
* Modified routes.py to handle login and registration routes with SimpleLogin decorators.
	- Adjusted login.html template to use POST method and connect to the /login endpoint.
* Updated dependencies for running our app
* Created run.py 

BenR -- 2024-11-6 11:15
* Deleted corrupted python files

chloeW -- 2024-11-6 20:39
* Created CSS files
  - Added a CSS file for each HTML template
  - Finished 6 of 10 files...waiting on working login to complete others
* Updated HTML templates
<<<<<<< HEAD
  - Made minor changes to HTML templates (added a few buttons, breaks, etc.)
=======
  - Made minor changes to HTML templates (added a few buttons, breaks, etc.)
>>>>>>> 7730096aeeca2ffc8daf647687e2ccb96eadac62
